/****************************************************************************
 *   Copyright (c) 2018 Zheng Lei (realthunder) <realthunder.dev@gmail.com> *
 *                                                                          *
 *   This file is part of the FreeCAD CAx development system.               *
 *                                                                          *
 *   This library is free software; you can redistribute it and/or          *
 *   modify it under the terms of the GNU Library General Public            *
 *   License as published by the Free Software Foundation; either           *
 *   version 2 of the License, or (at your option) any later version.       *
 *                                                                          *
 *   This library  is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
 *   GNU Library General Public License for more details.                   *
 *                                                                          *
 *   You should have received a copy of the GNU Library General Public      *
 *   License along with this library; see the file COPYING.LIB. If not,     *
 *   write to the Free Software Foundation, Inc., 59 Temple Place,          *
 *   Suite 330, Boston, MA  02111-1307, USA                                 *
 *                                                                          *
 ****************************************************************************/

#ifndef GUI_VIEW_PARAMS_H
#define GUI_VIEW_PARAMS_H

/*[[[cog
import ViewParams
ViewParams.declare_begin()
]]]*/

#include <Base/Parameter.h>

namespace Gui {
/** Convenient class to obtain view provider related parameters

 * The parameters are under group "User parameter:BaseApp/Preferences/View"
 *
 * This class is auto generated by ViewParams.py. Modify that file
 * instead of this one, if you want to add any parameter. You need
 * to install Cog Python package for code generation:
 * @code
 *     pip install cogapp
 * @endcode
 *
 * Once modified, you can regenerate the header and the source file,
 * @code
 *     python3 -m cogapp -r ViewParams.h ViewParams.cpp
 * @endcode
 *
 * You can add a new parameter by adding lines in ViewParams.py. Available
 * parameter types are 'Int, UInt, String, Bool, Float'. For example, to add
 * a new Int type parameter,
 * @code
 *     ParamInt(parameter_name, default_value, documentation, on_change=False)
 * @endcode
 *
 * If there is special handling on parameter change, pass in on_change=True.
 * And you need to provide a function implementation in ViewParams.cpp with
 * the following signature.
 * @code
 *     void ViewParams:on<parameter_name>Changed()
 * @endcode
 */
class GuiExport ViewParams {
public:
    static ParameterGrp::handle getHandle();

    //@{
    /// Accessor for parameter UseNewSelection
    static const bool & getUseNewSelection();
    static const bool & defaultUseNewSelection();
    static void removeUseNewSelection();
    static void setUseNewSelection(const bool &v);
    static const char *docUseNewSelection();
    //@}

    //@{
    /// Accessor for parameter UseSelectionRoot
    static const bool & getUseSelectionRoot();
    static const bool & defaultUseSelectionRoot();
    static void removeUseSelectionRoot();
    static void setUseSelectionRoot(const bool &v);
    static const char *docUseSelectionRoot();
    //@}

    //@{
    /// Accessor for parameter EnableSelection
    static const bool & getEnableSelection();
    static const bool & defaultEnableSelection();
    static void removeEnableSelection();
    static void setEnableSelection(const bool &v);
    static const char *docEnableSelection();
    //@}

    //@{
    /// Accessor for parameter RenderCache
    static const long & getRenderCache();
    static const long & defaultRenderCache();
    static void removeRenderCache();
    static void setRenderCache(const long &v);
    static const char *docRenderCache();
    //@}

    //@{
    /// Accessor for parameter RandomColor
    static const bool & getRandomColor();
    static const bool & defaultRandomColor();
    static void removeRandomColor();
    static void setRandomColor(const bool &v);
    static const char *docRandomColor();
    //@}

    //@{
    /// Accessor for parameter BoundingBoxColor
    static const unsigned long & getBoundingBoxColor();
    static const unsigned long & defaultBoundingBoxColor();
    static void removeBoundingBoxColor();
    static void setBoundingBoxColor(const unsigned long &v);
    static const char *docBoundingBoxColor();
    //@}

    //@{
    /// Accessor for parameter AnnotationTextColor
    static const unsigned long & getAnnotationTextColor();
    static const unsigned long & defaultAnnotationTextColor();
    static void removeAnnotationTextColor();
    static void setAnnotationTextColor(const unsigned long &v);
    static const char *docAnnotationTextColor();
    //@}

    //@{
    /// Accessor for parameter MarkerSize
    static const long & getMarkerSize();
    static const long & defaultMarkerSize();
    static void removeMarkerSize();
    static void setMarkerSize(const long &v);
    static const char *docMarkerSize();
    //@}

    //@{
    /// Accessor for parameter DefaultLinkColor
    static const unsigned long & getDefaultLinkColor();
    static const unsigned long & defaultDefaultLinkColor();
    static void removeDefaultLinkColor();
    static void setDefaultLinkColor(const unsigned long &v);
    static const char *docDefaultLinkColor();
    //@}

    //@{
    /// Accessor for parameter DefaultShapeLineColor
    static const unsigned long & getDefaultShapeLineColor();
    static const unsigned long & defaultDefaultShapeLineColor();
    static void removeDefaultShapeLineColor();
    static void setDefaultShapeLineColor(const unsigned long &v);
    static const char *docDefaultShapeLineColor();
    //@}

    //@{
    /// Accessor for parameter DefaultShapeVertexColor
    static const unsigned long & getDefaultShapeVertexColor();
    static const unsigned long & defaultDefaultShapeVertexColor();
    static void removeDefaultShapeVertexColor();
    static void setDefaultShapeVertexColor(const unsigned long &v);
    static const char *docDefaultShapeVertexColor();
    //@}

    //@{
    /// Accessor for parameter DefaultShapeColor
    static const unsigned long & getDefaultShapeColor();
    static const unsigned long & defaultDefaultShapeColor();
    static void removeDefaultShapeColor();
    static void setDefaultShapeColor(const unsigned long &v);
    static const char *docDefaultShapeColor();
    //@}

    //@{
    /// Accessor for parameter DefaultShapeLineWidth
    static const long & getDefaultShapeLineWidth();
    static const long & defaultDefaultShapeLineWidth();
    static void removeDefaultShapeLineWidth();
    static void setDefaultShapeLineWidth(const long &v);
    static const char *docDefaultShapeLineWidth();
    //@}

    //@{
    /// Accessor for parameter DefaultShapePointSize
    static const long & getDefaultShapePointSize();
    static const long & defaultDefaultShapePointSize();
    static void removeDefaultShapePointSize();
    static void setDefaultShapePointSize(const long &v);
    static const char *docDefaultShapePointSize();
    //@}

    //@{
    /// Accessor for parameter CoinCycleCheck
    static const bool & getCoinCycleCheck();
    static const bool & defaultCoinCycleCheck();
    static void removeCoinCycleCheck();
    static void setCoinCycleCheck(const bool &v);
    static const char *docCoinCycleCheck();
    //@}

    //@{
    /// Accessor for parameter EnablePropertyViewForInactiveDocument
    static const bool & getEnablePropertyViewForInactiveDocument();
    static const bool & defaultEnablePropertyViewForInactiveDocument();
    static void removeEnablePropertyViewForInactiveDocument();
    static void setEnablePropertyViewForInactiveDocument(const bool &v);
    static const char *docEnablePropertyViewForInactiveDocument();
    //@}

    //@{
    /// Accessor for parameter ShowSelectionBoundingBox
    ///
    /// Show bounding box when object is selectedin 3D view
    static const bool & getShowSelectionBoundingBox();
    static const bool & defaultShowSelectionBoundingBox();
    static void removeShowSelectionBoundingBox();
    static void setShowSelectionBoundingBox(const bool &v);
    static const char *docShowSelectionBoundingBox();
    //@}

    //@{
    /// Accessor for parameter PropertyViewTimer
    static const unsigned long & getPropertyViewTimer();
    static const unsigned long & defaultPropertyViewTimer();
    static void removePropertyViewTimer();
    static void setPropertyViewTimer(const unsigned long &v);
    static const char *docPropertyViewTimer();
    //@}

    //@{
    /// Accessor for parameter DefaultFontSize
    static const long & getDefaultFontSize();
    static const long & defaultDefaultFontSize();
    static void removeDefaultFontSize();
    static void setDefaultFontSize(const long &v);
    static const char *docDefaultFontSize();
    static void onDefaultFontSizeChanged();
    //@}
//[[[end]]]

    //-- Start of non auto generated code --//

    static int appDefaultFontSize();
    static void init();

    //-- End of non auto generated code --//

/*[[[cog
ViewParams.declare_end()
]]]*/

    // Auto generated code. See class document of ViewParams.
};
} // namespace Gui
//[[[end]]]


#endif // GUI_VIEW_PARAMS_H
